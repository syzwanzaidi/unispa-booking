<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\Booking;
use App\Models\BookingItem;
use App\Models\Invoice;
use App\Models\Package;
use Carbon\Carbon;
use Illuminate\Support\Arr;

class BookingInvoiceSeeder extends Seeder
{
    public function run()
    {
        $users = User::all();

        if ($users->isEmpty()) {
            $this->command->error('No users found. Please ensure UserSeeder is run first, or manually create users. Cannot seed bookings without users.');
            return;
        }

        $packages = Package::all();
        if ($packages->isEmpty()) {
            $this->command->error('No packages found. Please ensure packages are seeded or manually added. Cannot seed bookings without packages.');
            return;
        }

        $paymentMethods = ['Cash', 'Online'];
        $bookingStatuses = ['Pending', 'Confirmed', 'Completed', 'Cancelled'];

        $startDate = Carbon::now()->subMonths(8);
        $endDate = Carbon::now()->addMonths(1);

        $this->command->info('Generating booking and invoice data...');
        $generatedBookingsCount = 0;
        $generatedInvoicesCount = 0;

        for ($date = $startDate->copy(); $date->lte($endDate); $date->addDay()) {
            if (rand(1, 10) <= 7) {
                $numBookingsToday = rand(1, 3);

                for ($i = 0; $i < $numBookingsToday; $i++) {
                    $user = $users->random();
                    $selectedUserId = $user->id;
                    $selectedUserName = $user->name;

                    $package = $packages->random();

                    $itemPax = rand(1, 4);
                    $itemPrice = $package->package_price;
                    $itemDurationMinutes = (int) filter_var($package->duration, FILTER_SANITIZE_NUMBER_INT);
                    if ($itemDurationMinutes === 0) $itemDurationMinutes = 30;

                    $totalAmount = $itemPrice * $itemPax;
                    $paymentMethod = Arr::random($paymentMethods);
                    $bookingStatus = Arr::random($bookingStatuses);

                    if ($date->isFuture()) {
                        $bookingStatus = Arr::random(['Pending', 'Confirmed']);
                    } elseif ($date->lt(Carbon::now()->subDays(30))) {
                        $bookingStatus = Arr::random(['Completed', 'Confirmed', 'Cancelled']);
                    }

                    $bookingTime = Carbon::createFromTime(rand(10, 18), rand(0, 59))->format('H:i:s');
                    $bookingCreatedAt = $date->copy()->addMinutes(rand(0, 1440));

                    $booking = Booking::create([
                        'user_id' => $selectedUserId,
                        'booking_date' => $date->format('Y-m-d'),
                        'payment_method' => $paymentMethod,
                        'total_amount' => $totalAmount,
                        'booking_status' => $bookingStatus,
                        'notes' => 'Generated by seeder for test data.',
                        'created_at' => $bookingCreatedAt,
                        'updated_at' => $bookingCreatedAt,
                    ]);
                    $generatedBookingsCount++;

                    BookingItem::create([
                        'booking_id' => $booking->booking_id,
                        'package_id' => $package->package_id,
                        'item_pax' => $itemPax,
                        'item_start_time' => $bookingTime,
                        'item_duration_minutes' => $itemDurationMinutes,
                        'item_price' => $itemPrice,
                        'for_whom_name' => $selectedUserName,
                        'created_at' => $bookingCreatedAt,
                        'updated_at' => $bookingCreatedAt,
                    ]);

                    if (in_array($booking->booking_status, ['Confirmed', 'Completed'])) {
                        $invoiceNumber = 'INV-' . $date->format('Ymd') . '-' . str_pad($booking->booking_id, 5, '0', STR_PAD_LEFT);
                        $invoicePaymentStatus = 'Pending';
                        if ($paymentMethod === 'Online' && $booking->booking_status === 'Confirmed') {
                            $invoicePaymentStatus = 'Paid';
                        }
                        if ($booking->booking_status === 'Completed') {
                            $invoicePaymentStatus = 'Paid';
                        }

                        Invoice::create([
                            'booking_id' => $booking->booking_id,
                            'invoice_number' => $invoiceNumber,
                            'total_price' => $booking->total_amount,
                            'generated_at' => $booking->created_at->copy()->addMinutes(rand(5, 60)),
                            'payment_status' => $invoicePaymentStatus,
                        ]);
                        $generatedInvoicesCount++;
                    }
                }
            }
        }

        $this->command->info("Generated {$generatedBookingsCount} bookings and {$generatedInvoicesCount} invoices.");
    }
}
